{"version":3,"sources":["server.js"],"names":["express","require","path","multer","upload","dest","__dirname","app","PORT","set","imageStorage","diskStorage","destination","filename","req","file","cb","fieldname","Date","now","extname","originalname","imageUpload","storage","limits","fileSize","fileFilter","match","Error","undefined","use","post","single","res","render","im_loc","error","next","status","send","message","get","listen","console","log"],"mappings":"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","sourcesContent":["const express = require('express');\nconst path= require('path');\nconst multer = require('multer');\nconst upload = multer({dest: __dirname + '/uploads/images'});\n\nconst app = express();\nconst PORT = 3000;\n\napp.set(\"view engine\", \"ejs\");\n\nconst imageStorage = multer.diskStorage({\n    // Destination to store image     \n    destination: 'uploads/image', \n      filename: (req, file, cb) => {\n          cb(null, file.fieldname + '_' + Date.now() \n             + path.extname(file.originalname))\n            // file.fieldname is name of the field (image)\n            // path.extname get the uploaded file extension\n    }\n});\n\nconst imageUpload = multer({\n    storage: imageStorage,\n    limits: {\n      fileSize: 1000000 // 1000000 Bytes = 1 MB\n    },\n    fileFilter(req, file, cb) {\n      if (!file.originalname.match(/\\.(png|jpg)$/)) { \n         // upload only png and jpg format\n         return cb(new Error('Please upload a Image'))\n       }\n     cb(undefined, true)\n  }\n}) \n\napp.use(express.static('uploads'));\n\napp.post('/upload', imageUpload.single('photo'), (req, res) => {\n    res.render('upload.ejs',{im_loc: req.file.filename});\n}, (error, req, res, next) => {\n    res.status(400).send({ error: error.message })\n})\n\napp.get('/', (req, res) => {\n    res.render('index.ejs');\n})\n\napp.get('/officer', (req, res) => {\n  res.render('officer.ejs');\n})\n\napp.get('/agent', (req, res) => {\n  res.render('agent.ejs');\n})\n\napp.get('/map', (req, res) => {\n  res.render('map.ejs');\n})\n\napp.listen(PORT, () => {\n    console.log('Listening at ' + PORT );\n});"],"file":"server.dev.js"}